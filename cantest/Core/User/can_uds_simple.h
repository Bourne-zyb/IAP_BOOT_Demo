/******************************************************************************
 * @file    can_uds_simple.h
 * @brief   CAN User Data Service (UDS) Simple Example header file.
 * @author  Jason
 * @version V1.0.0
 * @date    2025-3
 * @copyright (c) 2025, All rights reserved.
 ******************************************************************************/

#ifndef __CAN_UDS_SIMPLE_H
#define __CAN_UDS_SIMPLE_H

/*
# Primitive bootloader for stm32, that supports programming via Unified Diagnostic Services (ISO-14229)

/******************************************************************************************
 * ECU 固件升级过程 (基于 ISO 15765-2 的 CAN 传输层协议)
 * 本文档补充描述了每个 UDS 服务指令在 CAN 总线传输中的实际帧格式。
 ******************************************************************************************/

/******************************************************************************************
 * ISO 15765-2 CAN 传输层
 * ----------------------------------------------------------------------------- 

/******************************************************************************************
 * 1. 切换到编程会话 (Diagnostic Session Control - 0x10)
 ******************************************************************************************

如果数据长度 ≤ 7 字节，则使用单帧 (SF) 传输 
发送 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7          |
 -----------------------------------------------------------------------------
 | 0x02 (PCI)   | 0x10      | 0x02         | 填充字节 (0x00)           |
 -----------------------------------------------------------------------------
 示例发送：02 10 02 00 00 00 00 00

接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7          |
 -----------------------------------------------------------------------------
 | 0x02 (PCI)   | 0x50      | 0x02         | 填充字节 (0x00)           |
 -----------------------------------------------------------------------------
 示例接收：02 50 02 00 00 00 00 00
 ******************************************************************************************/

/******************************************************************************************
 * 2. 执行擦除内存例程 (Routine Control - 0x31)
 ******************************************************************************************

如果数据长度 ≤ 7 字节，则使用单帧 (SF) 传输
发送 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 | Byte 5 ~ Byte 7 |
 -----------------------------------------------------------------------------
 | 0x04 (PCI)   | 0x31      | 0x01         | 0xFF   | 0x00   | 填充字节 (0x00) |
 -----------------------------------------------------------------------------
 示例发送：04 31 01 FF 00 00 00 00

接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 | Byte 5 ~ Byte 7 |
 -----------------------------------------------------------------------------
 | 0x04 (PCI)   | 0x71      | 0x01         | 0xFF   | 0x00   | 填充字节 (0x00) |
 -----------------------------------------------------------------------------
 示例接收：04 71 01 FF 00 00 00 00
 ******************************************************************************************/

/******************************************************************************************
 * 3. 请求下载 (Request Download - 0x34)
 ******************************************************************************************

如果数据长度 > 7 字节，则使用多帧 (FF + CF) 传输 
发送 (CAN 帧 - 首帧 FF)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 | Byte 5 | Byte 6 | Byte 7 |
 -----------------------------------------------------------------------------
 | 0x10 (PCI)   | 0x0B (总长度 11 字节)    | 0x34   | 0x00   | 0x44   | 0x00   | 0x00   | 0x00 |
 -----------------------------------------------------------------------------
 示例发送首帧：10 0C 34 00 44 00 00 00

发送 (CAN 帧 - 连续帧 CF)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 | Byte 5 | Byte 6 | Byte 7 |
 -----------------------------------------------------------------------------
 | 0x21 (PCI)   | 0x10      | 0x00         | 0x20   | 0x00   |  (0x00)          |
 -----------------------------------------------------------------------------
 示例发送连续帧：21 10 00 20 00 00 00 00

接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7          |
 -----------------------------------------------------------------------------
 | 0x04 (PCI)   | 0x74      | 0x20         | 0x04 0x00        |
 -----------------------------------------------------------------------------
 示例接收：04 74 20 04 00 00 00 00 
 ******************************************************************************************/

/******************************************************************************************
 * 4. 传输数据 (Transfer Data - 0x36)
 ******************************************************************************************

发送 (CAN 帧 - 单帧 SF, 如果数据块 ≤ 7 字节)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2 ~ Byte 7                            |
 -----------------------------------------------------------------------------
 | 0x07 (PCI)   | 0x36      | [数据块内容 (最多 6 字节)]                  |
 -----------------------------------------------------------------------------
 示例发送：07 36 <数据块内容>

发送 (CAN 帧 - 多帧 FF + CF, 如果数据块 > 7 字节)：
 首帧 FF：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7            |
 -----------------------------------------------------------------------------
 | 0x10 (PCI)   | 数据总长度  | [首 6 字节数据内容]                      |
 -----------------------------------------------------------------------------
 示例发送首帧：10 xx <首 6 字节数据>

 连续帧 CF：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1 ~ Byte 7                                       |
 -----------------------------------------------------------------------------
 | 0x2X (PCI)   | [后续数据内容，最多 7 字节]                           |
 -----------------------------------------------------------------------------
 示例发送连续帧：2X <后续数据内容>

接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7            |
 -----------------------------------------------------------------------------
 | 0x02 (PCI)   | 0x76      | 确认编号 (如 0x01)                        |
 -----------------------------------------------------------------------------
 示例接收：02 76 01 00 00 00 00 00
 ******************************************************************************************/

/******************************************************************************************
 * 5. 数据传输完成 (Request Transfer Exit - 0x37)
 ******************************************************************************************

发送 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2 ~ Byte 7                            |
 -----------------------------------------------------------------------------
 | 0x01 (PCI)   | 0x37      | 填充字节 (0x00)                            |
 -----------------------------------------------------------------------------
 示例发送：01 37 00 00 00 00 00 00

接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2 ~ Byte 7                            |
 -----------------------------------------------------------------------------
 | 0x01 (PCI)   | 0x77      | 填充字节 (0x00)                            |
 -----------------------------------------------------------------------------
 示例接收：01 77 00 00 00 00 00 00
 ******************************************************************************************/
/******************************************************************************************
 * 6. 校验例程 (Routine Control - 0x31)
 ******************************************************************************************
 发送 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 ~ Byte 7       |
 -----------------------------------------------------------------------------
 | 0x04 (PCI)   | 0x31      | 0x01 (启动校验) | 0xFF  |  (0x01)      |
 -----------------------------------------------------------------------------
 示例发送：04 31 01 FF 01 00 00 00
 接收 (CAN 帧)：
 -----------------------------------------------------------------------------
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 | Byte 4 ~ Byte 7       |
 -----------------------------------------------------------------------------
 | 0x04(PCI)   | 0x71      | 0x01 (校验完成) | 0x0FF   | (0x01)      |
 -----------------------------------------------------------------------------
 示例接收：04 71 01  FF 01 00 00 00
/******************************************************************************************
 * 7. 重置 ECU (ECU Reset - 0x11)
 * -----------------------------------------------------------------------------
 发送 (CAN 帧)：
 ----------------------------------------------------------------------------- 
 | Byte 0       | Byte 1    | Byte 2 ~ Byte 7                            |
 ----------------------------------------------------------------------------- 
 | 0x02 (PCI)   | 0x11      | 0x01 (硬重置)                              |
 ----------------------------------------------------------------------------- 
 示例发送：02 11 01 00 00 00 00 00
 接收 (CAN 帧)：
 ----------------------------------------------------------------------------- 
 | Byte 0       | Byte 1    | Byte 2       | Byte 3 ~ Byte 7            |
 ----------------------------------------------------------------------------- 
 | 0x02 (PCI)   | 0x51      | 0x01 (确认硬重置)                          |
 ----------------------------------------------------------------------------- 
 示例接收：02 51 01 00 00 00 00 00
/******************************************************************************************\

/* Private Includes ----------------------------------------------------------*/
#include "iap_user.h"
#include "common.h"

/* Exported constants --------------------------------------------------------*/
// 数据缓冲区大小
#define UDS_MAX_PAYLOAD_SIZE 1200
#define UDS_WRITE_BLOCK_SIZE 1024
// 宏定义有效的 CAN ID
#define VALID_CAN_ID 0x7E0

//#define DEBUG
// 定义调试输出宏
#ifdef DEBUG
	 #define DEBUG_PRINT(fmt, ...) printf(fmt, ##__VA_ARGS__)
#else
	 #define DEBUG_PRINT(fmt, ...) // 关闭调试输出
#endif // DEBUG

#define PROG_START_ADDR 		APPLICATION_ADDRESS
#define PROG_END_ADDR 			(PROG_START_ADDR + USER_FLASH_SIZE)

/* Exported types ------------------------------------------------------------*/
// 定义 UDS 服务状态
typedef enum {
    noSession = 0,       // 无会话
    activeSession = 1,   // 活动会话
    downloadRequested = 2 // 下载请求状态
} programmingSessionStatus_t;

// 枚举定义 UDS 服务 升级 ID
typedef enum {
    UDS_SERVICE_DIAGNOSTIC_SESSION_CONTROL = 0x10, // 会话控制
    UDS_SERVICE_ECU_RESET = 0x11,                 // ECU 重置
    UDS_SERVICE_REQUEST_DOWNLOAD = 0x34,          // 请求下载
    UDS_SERVICE_TRANSFER_DATA = 0x36,             // 传输数据
    UDS_SERVICE_TRANSFER_EXIT = 0x37,             // 传输退出
    UDS_SERVICE_ROUTINE_CONTROL = 0x31,           // 例行控制
    UDS_SERVICE_UNKNOWN = 0xFF                    // 未知服务
} UDS_ServiceID;

// 枚举定义流控帧类型
typedef enum {
    FLOW_STATUS_CONTINUE = 0x30, // Continue to Send (CTS)
    FLOW_STATUS_WAIT = 0x31,     // Wait
    FLOW_STATUS_ABORT = 0x32     // Abort
} FlowControlType;


// 定义常见 UDS 否定响应码（NRC, Negative Response Code）
typedef enum {
    UDS_ERROR_GENERAL_REJECT = 0x10,         // 通用拒绝
    UDS_ERROR_SERVICE_NOT_SUPPORTED = 0x11, // 服务不支持
    UDS_ERROR_SUB_FUNCTION_NOT_SUPPORTED = 0x12, // 子功能不支持
    UDS_ERROR_INVALID_FORMAT = 0x13,        // 消息长度或格式错误
    UDS_ERROR_CONDITIONS_NOT_CORRECT = 0x22,// 条件不正确
    UDS_ERROR_REQUEST_SEQUENCE_ERROR = 0x24,// 请求序列错误
    UDS_ERROR_REQUEST_OUT_OF_RANGE = 0x31,  // 请求超出范围
    UDS_ERROR_SECURITY_ACCESS_DENIED = 0x33,// 安全访问被拒绝
    UDS_ERROR_TRANSFER_DATA_ERROR = 0x72    // 数据传输错误
} UDS_ErrorCode;


// 定义 can_uds_t 数据结构
typedef struct {
    void (*tx_msg_func)(uint32_t id, uint8_t *data, uint8_t len); // CAN 发送函数
    uint32_t (*flash_write_func)(uint32_t address, uint32_t *p_source, uint32_t length); // Flash 写入函数
    HAL_StatusTypeDef (*flash_erase_app_func)(void); // Flash 擦除函数
    IAP_Interface *IAP_if;                            // IAP 接口
} can_uds_t;

/* Exported macro ------------------------------------------------------------*/

/* Exported variables --------------------------------------------------------*/

/* Exported function prototypes ----------------------------------------------*/
void can_uds_init();
void can_uds_handle(uint32_t canid, uint8_t *data, uint8_t dlc);

#endif /* __CMD_USER_H */
 
 